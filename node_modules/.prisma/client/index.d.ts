
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model idols
 * 
 */
export type idols = {
  id: number
  name: string
  type: string
  user_id: number
  image_url: string
  rarity: number
}

/**
 * Model market
 * 
 */
export type market = {
  id: number
  idol_id: number
  price: number
  owner_id: number
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  account_name: string
  password: string
  diamonds: number
  peanuts: number
  nickname: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Idols
 * const idols = await prisma.idols.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Idols
   * const idols = await prisma.idols.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.idols`: Exposes CRUD operations for the **idols** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Idols
    * const idols = await prisma.idols.findMany()
    * ```
    */
  get idols(): Prisma.idolsDelegate<GlobalReject>;

  /**
   * `prisma.market`: Exposes CRUD operations for the **market** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Markets
    * const markets = await prisma.market.findMany()
    * ```
    */
  get market(): Prisma.marketDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    idols: 'idols',
    market: 'market',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    idols: number
    market: number
  }

  export type UsersCountOutputTypeSelect = {
    idols?: boolean
    market?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model idols
   */


  export type AggregateIdols = {
    _count: IdolsCountAggregateOutputType | null
    _avg: IdolsAvgAggregateOutputType | null
    _sum: IdolsSumAggregateOutputType | null
    _min: IdolsMinAggregateOutputType | null
    _max: IdolsMaxAggregateOutputType | null
  }

  export type IdolsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    rarity: number | null
  }

  export type IdolsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    rarity: number | null
  }

  export type IdolsMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    user_id: number | null
    image_url: string | null
    rarity: number | null
  }

  export type IdolsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    user_id: number | null
    image_url: string | null
    rarity: number | null
  }

  export type IdolsCountAggregateOutputType = {
    id: number
    name: number
    type: number
    user_id: number
    image_url: number
    rarity: number
    _all: number
  }


  export type IdolsAvgAggregateInputType = {
    id?: true
    user_id?: true
    rarity?: true
  }

  export type IdolsSumAggregateInputType = {
    id?: true
    user_id?: true
    rarity?: true
  }

  export type IdolsMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    user_id?: true
    image_url?: true
    rarity?: true
  }

  export type IdolsMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    user_id?: true
    image_url?: true
    rarity?: true
  }

  export type IdolsCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    user_id?: true
    image_url?: true
    rarity?: true
    _all?: true
  }

  export type IdolsAggregateArgs = {
    /**
     * Filter which idols to aggregate.
     */
    where?: idolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of idols to fetch.
     */
    orderBy?: Enumerable<idolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: idolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` idols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` idols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned idols
    **/
    _count?: true | IdolsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IdolsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IdolsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IdolsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IdolsMaxAggregateInputType
  }

  export type GetIdolsAggregateType<T extends IdolsAggregateArgs> = {
        [P in keyof T & keyof AggregateIdols]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIdols[P]>
      : GetScalarType<T[P], AggregateIdols[P]>
  }




  export type IdolsGroupByArgs = {
    where?: idolsWhereInput
    orderBy?: Enumerable<idolsOrderByWithAggregationInput>
    by: IdolsScalarFieldEnum[]
    having?: idolsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IdolsCountAggregateInputType | true
    _avg?: IdolsAvgAggregateInputType
    _sum?: IdolsSumAggregateInputType
    _min?: IdolsMinAggregateInputType
    _max?: IdolsMaxAggregateInputType
  }


  export type IdolsGroupByOutputType = {
    id: number
    name: string
    type: string
    user_id: number
    image_url: string
    rarity: number
    _count: IdolsCountAggregateOutputType | null
    _avg: IdolsAvgAggregateOutputType | null
    _sum: IdolsSumAggregateOutputType | null
    _min: IdolsMinAggregateOutputType | null
    _max: IdolsMaxAggregateOutputType | null
  }

  type GetIdolsGroupByPayload<T extends IdolsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IdolsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IdolsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IdolsGroupByOutputType[P]>
            : GetScalarType<T[P], IdolsGroupByOutputType[P]>
        }
      >
    >


  export type idolsSelect = {
    id?: boolean
    name?: boolean
    type?: boolean
    user_id?: boolean
    image_url?: boolean
    rarity?: boolean
    users?: boolean | usersArgs
    market?: boolean | marketArgs
  }


  export type idolsInclude = {
    users?: boolean | usersArgs
    market?: boolean | marketArgs
  }

  export type idolsGetPayload<S extends boolean | null | undefined | idolsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? idols :
    S extends undefined ? never :
    S extends { include: any } & (idolsArgs | idolsFindManyArgs)
    ? idols  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends 'market' ? marketGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (idolsArgs | idolsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends 'market' ? marketGetPayload<S['select'][P]> | null :  P extends keyof idols ? idols[P] : never
  } 
      : idols


  type idolsCountArgs = 
    Omit<idolsFindManyArgs, 'select' | 'include'> & {
      select?: IdolsCountAggregateInputType | true
    }

  export interface idolsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Idols that matches the filter.
     * @param {idolsFindUniqueArgs} args - Arguments to find a Idols
     * @example
     * // Get one Idols
     * const idols = await prisma.idols.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends idolsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, idolsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'idols'> extends True ? Prisma__idolsClient<idolsGetPayload<T>> : Prisma__idolsClient<idolsGetPayload<T> | null, null>

    /**
     * Find one Idols that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {idolsFindUniqueOrThrowArgs} args - Arguments to find a Idols
     * @example
     * // Get one Idols
     * const idols = await prisma.idols.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends idolsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, idolsFindUniqueOrThrowArgs>
    ): Prisma__idolsClient<idolsGetPayload<T>>

    /**
     * Find the first Idols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {idolsFindFirstArgs} args - Arguments to find a Idols
     * @example
     * // Get one Idols
     * const idols = await prisma.idols.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends idolsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, idolsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'idols'> extends True ? Prisma__idolsClient<idolsGetPayload<T>> : Prisma__idolsClient<idolsGetPayload<T> | null, null>

    /**
     * Find the first Idols that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {idolsFindFirstOrThrowArgs} args - Arguments to find a Idols
     * @example
     * // Get one Idols
     * const idols = await prisma.idols.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends idolsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, idolsFindFirstOrThrowArgs>
    ): Prisma__idolsClient<idolsGetPayload<T>>

    /**
     * Find zero or more Idols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {idolsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Idols
     * const idols = await prisma.idols.findMany()
     * 
     * // Get first 10 Idols
     * const idols = await prisma.idols.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const idolsWithIdOnly = await prisma.idols.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends idolsFindManyArgs>(
      args?: SelectSubset<T, idolsFindManyArgs>
    ): PrismaPromise<Array<idolsGetPayload<T>>>

    /**
     * Create a Idols.
     * @param {idolsCreateArgs} args - Arguments to create a Idols.
     * @example
     * // Create one Idols
     * const Idols = await prisma.idols.create({
     *   data: {
     *     // ... data to create a Idols
     *   }
     * })
     * 
    **/
    create<T extends idolsCreateArgs>(
      args: SelectSubset<T, idolsCreateArgs>
    ): Prisma__idolsClient<idolsGetPayload<T>>

    /**
     * Create many Idols.
     *     @param {idolsCreateManyArgs} args - Arguments to create many Idols.
     *     @example
     *     // Create many Idols
     *     const idols = await prisma.idols.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends idolsCreateManyArgs>(
      args?: SelectSubset<T, idolsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Idols.
     * @param {idolsDeleteArgs} args - Arguments to delete one Idols.
     * @example
     * // Delete one Idols
     * const Idols = await prisma.idols.delete({
     *   where: {
     *     // ... filter to delete one Idols
     *   }
     * })
     * 
    **/
    delete<T extends idolsDeleteArgs>(
      args: SelectSubset<T, idolsDeleteArgs>
    ): Prisma__idolsClient<idolsGetPayload<T>>

    /**
     * Update one Idols.
     * @param {idolsUpdateArgs} args - Arguments to update one Idols.
     * @example
     * // Update one Idols
     * const idols = await prisma.idols.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends idolsUpdateArgs>(
      args: SelectSubset<T, idolsUpdateArgs>
    ): Prisma__idolsClient<idolsGetPayload<T>>

    /**
     * Delete zero or more Idols.
     * @param {idolsDeleteManyArgs} args - Arguments to filter Idols to delete.
     * @example
     * // Delete a few Idols
     * const { count } = await prisma.idols.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends idolsDeleteManyArgs>(
      args?: SelectSubset<T, idolsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Idols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {idolsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Idols
     * const idols = await prisma.idols.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends idolsUpdateManyArgs>(
      args: SelectSubset<T, idolsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Idols.
     * @param {idolsUpsertArgs} args - Arguments to update or create a Idols.
     * @example
     * // Update or create a Idols
     * const idols = await prisma.idols.upsert({
     *   create: {
     *     // ... data to create a Idols
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Idols we want to update
     *   }
     * })
    **/
    upsert<T extends idolsUpsertArgs>(
      args: SelectSubset<T, idolsUpsertArgs>
    ): Prisma__idolsClient<idolsGetPayload<T>>

    /**
     * Count the number of Idols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {idolsCountArgs} args - Arguments to filter Idols to count.
     * @example
     * // Count the number of Idols
     * const count = await prisma.idols.count({
     *   where: {
     *     // ... the filter for the Idols we want to count
     *   }
     * })
    **/
    count<T extends idolsCountArgs>(
      args?: Subset<T, idolsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IdolsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Idols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdolsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IdolsAggregateArgs>(args: Subset<T, IdolsAggregateArgs>): PrismaPromise<GetIdolsAggregateType<T>>

    /**
     * Group by Idols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdolsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IdolsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IdolsGroupByArgs['orderBy'] }
        : { orderBy?: IdolsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IdolsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdolsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for idols.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__idolsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    market<T extends marketArgs= {}>(args?: Subset<T, marketArgs>): Prisma__marketClient<marketGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * idols base type for findUnique actions
   */
  export type idolsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * Filter, which idols to fetch.
     */
    where: idolsWhereUniqueInput
  }

  /**
   * idols findUnique
   */
  export interface idolsFindUniqueArgs extends idolsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * idols findUniqueOrThrow
   */
  export type idolsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * Filter, which idols to fetch.
     */
    where: idolsWhereUniqueInput
  }


  /**
   * idols base type for findFirst actions
   */
  export type idolsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * Filter, which idols to fetch.
     */
    where?: idolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of idols to fetch.
     */
    orderBy?: Enumerable<idolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for idols.
     */
    cursor?: idolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` idols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` idols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of idols.
     */
    distinct?: Enumerable<IdolsScalarFieldEnum>
  }

  /**
   * idols findFirst
   */
  export interface idolsFindFirstArgs extends idolsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * idols findFirstOrThrow
   */
  export type idolsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * Filter, which idols to fetch.
     */
    where?: idolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of idols to fetch.
     */
    orderBy?: Enumerable<idolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for idols.
     */
    cursor?: idolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` idols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` idols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of idols.
     */
    distinct?: Enumerable<IdolsScalarFieldEnum>
  }


  /**
   * idols findMany
   */
  export type idolsFindManyArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * Filter, which idols to fetch.
     */
    where?: idolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of idols to fetch.
     */
    orderBy?: Enumerable<idolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing idols.
     */
    cursor?: idolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` idols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` idols.
     */
    skip?: number
    distinct?: Enumerable<IdolsScalarFieldEnum>
  }


  /**
   * idols create
   */
  export type idolsCreateArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * The data needed to create a idols.
     */
    data: XOR<idolsCreateInput, idolsUncheckedCreateInput>
  }


  /**
   * idols createMany
   */
  export type idolsCreateManyArgs = {
    /**
     * The data used to create many idols.
     */
    data: Enumerable<idolsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * idols update
   */
  export type idolsUpdateArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * The data needed to update a idols.
     */
    data: XOR<idolsUpdateInput, idolsUncheckedUpdateInput>
    /**
     * Choose, which idols to update.
     */
    where: idolsWhereUniqueInput
  }


  /**
   * idols updateMany
   */
  export type idolsUpdateManyArgs = {
    /**
     * The data used to update idols.
     */
    data: XOR<idolsUpdateManyMutationInput, idolsUncheckedUpdateManyInput>
    /**
     * Filter which idols to update
     */
    where?: idolsWhereInput
  }


  /**
   * idols upsert
   */
  export type idolsUpsertArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * The filter to search for the idols to update in case it exists.
     */
    where: idolsWhereUniqueInput
    /**
     * In case the idols found by the `where` argument doesn't exist, create a new idols with this data.
     */
    create: XOR<idolsCreateInput, idolsUncheckedCreateInput>
    /**
     * In case the idols was found with the provided `where` argument, update it with this data.
     */
    update: XOR<idolsUpdateInput, idolsUncheckedUpdateInput>
  }


  /**
   * idols delete
   */
  export type idolsDeleteArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    /**
     * Filter which idols to delete.
     */
    where: idolsWhereUniqueInput
  }


  /**
   * idols deleteMany
   */
  export type idolsDeleteManyArgs = {
    /**
     * Filter which idols to delete
     */
    where?: idolsWhereInput
  }


  /**
   * idols without action
   */
  export type idolsArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
  }



  /**
   * Model market
   */


  export type AggregateMarket = {
    _count: MarketCountAggregateOutputType | null
    _avg: MarketAvgAggregateOutputType | null
    _sum: MarketSumAggregateOutputType | null
    _min: MarketMinAggregateOutputType | null
    _max: MarketMaxAggregateOutputType | null
  }

  export type MarketAvgAggregateOutputType = {
    id: number | null
    idol_id: number | null
    price: number | null
    owner_id: number | null
  }

  export type MarketSumAggregateOutputType = {
    id: number | null
    idol_id: number | null
    price: number | null
    owner_id: number | null
  }

  export type MarketMinAggregateOutputType = {
    id: number | null
    idol_id: number | null
    price: number | null
    owner_id: number | null
  }

  export type MarketMaxAggregateOutputType = {
    id: number | null
    idol_id: number | null
    price: number | null
    owner_id: number | null
  }

  export type MarketCountAggregateOutputType = {
    id: number
    idol_id: number
    price: number
    owner_id: number
    _all: number
  }


  export type MarketAvgAggregateInputType = {
    id?: true
    idol_id?: true
    price?: true
    owner_id?: true
  }

  export type MarketSumAggregateInputType = {
    id?: true
    idol_id?: true
    price?: true
    owner_id?: true
  }

  export type MarketMinAggregateInputType = {
    id?: true
    idol_id?: true
    price?: true
    owner_id?: true
  }

  export type MarketMaxAggregateInputType = {
    id?: true
    idol_id?: true
    price?: true
    owner_id?: true
  }

  export type MarketCountAggregateInputType = {
    id?: true
    idol_id?: true
    price?: true
    owner_id?: true
    _all?: true
  }

  export type MarketAggregateArgs = {
    /**
     * Filter which market to aggregate.
     */
    where?: marketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of markets to fetch.
     */
    orderBy?: Enumerable<marketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: marketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` markets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` markets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned markets
    **/
    _count?: true | MarketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketMaxAggregateInputType
  }

  export type GetMarketAggregateType<T extends MarketAggregateArgs> = {
        [P in keyof T & keyof AggregateMarket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarket[P]>
      : GetScalarType<T[P], AggregateMarket[P]>
  }




  export type MarketGroupByArgs = {
    where?: marketWhereInput
    orderBy?: Enumerable<marketOrderByWithAggregationInput>
    by: MarketScalarFieldEnum[]
    having?: marketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketCountAggregateInputType | true
    _avg?: MarketAvgAggregateInputType
    _sum?: MarketSumAggregateInputType
    _min?: MarketMinAggregateInputType
    _max?: MarketMaxAggregateInputType
  }


  export type MarketGroupByOutputType = {
    id: number
    idol_id: number
    price: number
    owner_id: number
    _count: MarketCountAggregateOutputType | null
    _avg: MarketAvgAggregateOutputType | null
    _sum: MarketSumAggregateOutputType | null
    _min: MarketMinAggregateOutputType | null
    _max: MarketMaxAggregateOutputType | null
  }

  type GetMarketGroupByPayload<T extends MarketGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MarketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketGroupByOutputType[P]>
            : GetScalarType<T[P], MarketGroupByOutputType[P]>
        }
      >
    >


  export type marketSelect = {
    id?: boolean
    idol_id?: boolean
    price?: boolean
    owner_id?: boolean
    idols?: boolean | idolsArgs
    users?: boolean | usersArgs
  }


  export type marketInclude = {
    idols?: boolean | idolsArgs
    users?: boolean | usersArgs
  }

  export type marketGetPayload<S extends boolean | null | undefined | marketArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? market :
    S extends undefined ? never :
    S extends { include: any } & (marketArgs | marketFindManyArgs)
    ? market  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'idols' ? idolsGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (marketArgs | marketFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'idols' ? idolsGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :  P extends keyof market ? market[P] : never
  } 
      : market


  type marketCountArgs = 
    Omit<marketFindManyArgs, 'select' | 'include'> & {
      select?: MarketCountAggregateInputType | true
    }

  export interface marketDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Market that matches the filter.
     * @param {marketFindUniqueArgs} args - Arguments to find a Market
     * @example
     * // Get one Market
     * const market = await prisma.market.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends marketFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, marketFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'market'> extends True ? Prisma__marketClient<marketGetPayload<T>> : Prisma__marketClient<marketGetPayload<T> | null, null>

    /**
     * Find one Market that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {marketFindUniqueOrThrowArgs} args - Arguments to find a Market
     * @example
     * // Get one Market
     * const market = await prisma.market.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends marketFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, marketFindUniqueOrThrowArgs>
    ): Prisma__marketClient<marketGetPayload<T>>

    /**
     * Find the first Market that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketFindFirstArgs} args - Arguments to find a Market
     * @example
     * // Get one Market
     * const market = await prisma.market.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends marketFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, marketFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'market'> extends True ? Prisma__marketClient<marketGetPayload<T>> : Prisma__marketClient<marketGetPayload<T> | null, null>

    /**
     * Find the first Market that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketFindFirstOrThrowArgs} args - Arguments to find a Market
     * @example
     * // Get one Market
     * const market = await prisma.market.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends marketFindFirstOrThrowArgs>(
      args?: SelectSubset<T, marketFindFirstOrThrowArgs>
    ): Prisma__marketClient<marketGetPayload<T>>

    /**
     * Find zero or more Markets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Markets
     * const markets = await prisma.market.findMany()
     * 
     * // Get first 10 Markets
     * const markets = await prisma.market.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketWithIdOnly = await prisma.market.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends marketFindManyArgs>(
      args?: SelectSubset<T, marketFindManyArgs>
    ): PrismaPromise<Array<marketGetPayload<T>>>

    /**
     * Create a Market.
     * @param {marketCreateArgs} args - Arguments to create a Market.
     * @example
     * // Create one Market
     * const Market = await prisma.market.create({
     *   data: {
     *     // ... data to create a Market
     *   }
     * })
     * 
    **/
    create<T extends marketCreateArgs>(
      args: SelectSubset<T, marketCreateArgs>
    ): Prisma__marketClient<marketGetPayload<T>>

    /**
     * Create many Markets.
     *     @param {marketCreateManyArgs} args - Arguments to create many Markets.
     *     @example
     *     // Create many Markets
     *     const market = await prisma.market.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends marketCreateManyArgs>(
      args?: SelectSubset<T, marketCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Market.
     * @param {marketDeleteArgs} args - Arguments to delete one Market.
     * @example
     * // Delete one Market
     * const Market = await prisma.market.delete({
     *   where: {
     *     // ... filter to delete one Market
     *   }
     * })
     * 
    **/
    delete<T extends marketDeleteArgs>(
      args: SelectSubset<T, marketDeleteArgs>
    ): Prisma__marketClient<marketGetPayload<T>>

    /**
     * Update one Market.
     * @param {marketUpdateArgs} args - Arguments to update one Market.
     * @example
     * // Update one Market
     * const market = await prisma.market.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends marketUpdateArgs>(
      args: SelectSubset<T, marketUpdateArgs>
    ): Prisma__marketClient<marketGetPayload<T>>

    /**
     * Delete zero or more Markets.
     * @param {marketDeleteManyArgs} args - Arguments to filter Markets to delete.
     * @example
     * // Delete a few Markets
     * const { count } = await prisma.market.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends marketDeleteManyArgs>(
      args?: SelectSubset<T, marketDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Markets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Markets
     * const market = await prisma.market.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends marketUpdateManyArgs>(
      args: SelectSubset<T, marketUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Market.
     * @param {marketUpsertArgs} args - Arguments to update or create a Market.
     * @example
     * // Update or create a Market
     * const market = await prisma.market.upsert({
     *   create: {
     *     // ... data to create a Market
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Market we want to update
     *   }
     * })
    **/
    upsert<T extends marketUpsertArgs>(
      args: SelectSubset<T, marketUpsertArgs>
    ): Prisma__marketClient<marketGetPayload<T>>

    /**
     * Count the number of Markets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marketCountArgs} args - Arguments to filter Markets to count.
     * @example
     * // Count the number of Markets
     * const count = await prisma.market.count({
     *   where: {
     *     // ... the filter for the Markets we want to count
     *   }
     * })
    **/
    count<T extends marketCountArgs>(
      args?: Subset<T, marketCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Market.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketAggregateArgs>(args: Subset<T, MarketAggregateArgs>): PrismaPromise<GetMarketAggregateType<T>>

    /**
     * Group by Market.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketGroupByArgs['orderBy'] }
        : { orderBy?: MarketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for market.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__marketClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    idols<T extends idolsArgs= {}>(args?: Subset<T, idolsArgs>): Prisma__idolsClient<idolsGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * market base type for findUnique actions
   */
  export type marketFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * Filter, which market to fetch.
     */
    where: marketWhereUniqueInput
  }

  /**
   * market findUnique
   */
  export interface marketFindUniqueArgs extends marketFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * market findUniqueOrThrow
   */
  export type marketFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * Filter, which market to fetch.
     */
    where: marketWhereUniqueInput
  }


  /**
   * market base type for findFirst actions
   */
  export type marketFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * Filter, which market to fetch.
     */
    where?: marketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of markets to fetch.
     */
    orderBy?: Enumerable<marketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for markets.
     */
    cursor?: marketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` markets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` markets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of markets.
     */
    distinct?: Enumerable<MarketScalarFieldEnum>
  }

  /**
   * market findFirst
   */
  export interface marketFindFirstArgs extends marketFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * market findFirstOrThrow
   */
  export type marketFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * Filter, which market to fetch.
     */
    where?: marketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of markets to fetch.
     */
    orderBy?: Enumerable<marketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for markets.
     */
    cursor?: marketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` markets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` markets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of markets.
     */
    distinct?: Enumerable<MarketScalarFieldEnum>
  }


  /**
   * market findMany
   */
  export type marketFindManyArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * Filter, which markets to fetch.
     */
    where?: marketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of markets to fetch.
     */
    orderBy?: Enumerable<marketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing markets.
     */
    cursor?: marketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` markets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` markets.
     */
    skip?: number
    distinct?: Enumerable<MarketScalarFieldEnum>
  }


  /**
   * market create
   */
  export type marketCreateArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * The data needed to create a market.
     */
    data: XOR<marketCreateInput, marketUncheckedCreateInput>
  }


  /**
   * market createMany
   */
  export type marketCreateManyArgs = {
    /**
     * The data used to create many markets.
     */
    data: Enumerable<marketCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * market update
   */
  export type marketUpdateArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * The data needed to update a market.
     */
    data: XOR<marketUpdateInput, marketUncheckedUpdateInput>
    /**
     * Choose, which market to update.
     */
    where: marketWhereUniqueInput
  }


  /**
   * market updateMany
   */
  export type marketUpdateManyArgs = {
    /**
     * The data used to update markets.
     */
    data: XOR<marketUpdateManyMutationInput, marketUncheckedUpdateManyInput>
    /**
     * Filter which markets to update
     */
    where?: marketWhereInput
  }


  /**
   * market upsert
   */
  export type marketUpsertArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * The filter to search for the market to update in case it exists.
     */
    where: marketWhereUniqueInput
    /**
     * In case the market found by the `where` argument doesn't exist, create a new market with this data.
     */
    create: XOR<marketCreateInput, marketUncheckedCreateInput>
    /**
     * In case the market was found with the provided `where` argument, update it with this data.
     */
    update: XOR<marketUpdateInput, marketUncheckedUpdateInput>
  }


  /**
   * market delete
   */
  export type marketDeleteArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    /**
     * Filter which market to delete.
     */
    where: marketWhereUniqueInput
  }


  /**
   * market deleteMany
   */
  export type marketDeleteManyArgs = {
    /**
     * Filter which markets to delete
     */
    where?: marketWhereInput
  }


  /**
   * market without action
   */
  export type marketArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    diamonds: number | null
    peanuts: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    diamonds: number | null
    peanuts: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    account_name: string | null
    password: string | null
    diamonds: number | null
    peanuts: number | null
    nickname: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    account_name: string | null
    password: string | null
    diamonds: number | null
    peanuts: number | null
    nickname: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    account_name: number
    password: number
    diamonds: number
    peanuts: number
    nickname: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    diamonds?: true
    peanuts?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    diamonds?: true
    peanuts?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    account_name?: true
    password?: true
    diamonds?: true
    peanuts?: true
    nickname?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    account_name?: true
    password?: true
    diamonds?: true
    peanuts?: true
    nickname?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    account_name?: true
    password?: true
    diamonds?: true
    peanuts?: true
    nickname?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    account_name: string
    password: string
    diamonds: number
    peanuts: number
    nickname: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    account_name?: boolean
    password?: boolean
    diamonds?: boolean
    peanuts?: boolean
    nickname?: boolean
    idols?: boolean | users$idolsArgs
    market?: boolean | users$marketArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type usersInclude = {
    idols?: boolean | users$idolsArgs
    market?: boolean | users$marketArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<S extends boolean | null | undefined | usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'idols' ? Array < idolsGetPayload<S['include'][P]>>  :
        P extends 'market' ? Array < marketGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'idols' ? Array < idolsGetPayload<S['select'][P]>>  :
        P extends 'market' ? Array < marketGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    idols<T extends users$idolsArgs= {}>(args?: Subset<T, users$idolsArgs>): PrismaPromise<Array<idolsGetPayload<T>>| Null>;

    market<T extends users$marketArgs= {}>(args?: Subset<T, users$marketArgs>): PrismaPromise<Array<marketGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.idols
   */
  export type users$idolsArgs = {
    /**
     * Select specific fields to fetch from the idols
     */
    select?: idolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: idolsInclude | null
    where?: idolsWhereInput
    orderBy?: Enumerable<idolsOrderByWithRelationInput>
    cursor?: idolsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<IdolsScalarFieldEnum>
  }


  /**
   * users.market
   */
  export type users$marketArgs = {
    /**
     * Select specific fields to fetch from the market
     */
    select?: marketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: marketInclude | null
    where?: marketWhereInput
    orderBy?: Enumerable<marketOrderByWithRelationInput>
    cursor?: marketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MarketScalarFieldEnum>
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const IdolsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    user_id: 'user_id',
    image_url: 'image_url',
    rarity: 'rarity'
  };

  export type IdolsScalarFieldEnum = (typeof IdolsScalarFieldEnum)[keyof typeof IdolsScalarFieldEnum]


  export const MarketScalarFieldEnum: {
    id: 'id',
    idol_id: 'idol_id',
    price: 'price',
    owner_id: 'owner_id'
  };

  export type MarketScalarFieldEnum = (typeof MarketScalarFieldEnum)[keyof typeof MarketScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    account_name: 'account_name',
    password: 'password',
    diamonds: 'diamonds',
    peanuts: 'peanuts',
    nickname: 'nickname'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type idolsWhereInput = {
    AND?: Enumerable<idolsWhereInput>
    OR?: Enumerable<idolsWhereInput>
    NOT?: Enumerable<idolsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    user_id?: IntFilter | number
    image_url?: StringFilter | string
    rarity?: IntFilter | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    market?: XOR<MarketRelationFilter, marketWhereInput> | null
  }

  export type idolsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    image_url?: SortOrder
    rarity?: SortOrder
    users?: usersOrderByWithRelationInput
    market?: marketOrderByWithRelationInput
  }

  export type idolsWhereUniqueInput = {
    id?: number
  }

  export type idolsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    image_url?: SortOrder
    rarity?: SortOrder
    _count?: idolsCountOrderByAggregateInput
    _avg?: idolsAvgOrderByAggregateInput
    _max?: idolsMaxOrderByAggregateInput
    _min?: idolsMinOrderByAggregateInput
    _sum?: idolsSumOrderByAggregateInput
  }

  export type idolsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<idolsScalarWhereWithAggregatesInput>
    OR?: Enumerable<idolsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<idolsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
    image_url?: StringWithAggregatesFilter | string
    rarity?: IntWithAggregatesFilter | number
  }

  export type marketWhereInput = {
    AND?: Enumerable<marketWhereInput>
    OR?: Enumerable<marketWhereInput>
    NOT?: Enumerable<marketWhereInput>
    id?: IntFilter | number
    idol_id?: IntFilter | number
    price?: IntFilter | number
    owner_id?: IntFilter | number
    idols?: XOR<IdolsRelationFilter, idolsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type marketOrderByWithRelationInput = {
    id?: SortOrder
    idol_id?: SortOrder
    price?: SortOrder
    owner_id?: SortOrder
    idols?: idolsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type marketWhereUniqueInput = {
    id?: number
    idol_id?: number
  }

  export type marketOrderByWithAggregationInput = {
    id?: SortOrder
    idol_id?: SortOrder
    price?: SortOrder
    owner_id?: SortOrder
    _count?: marketCountOrderByAggregateInput
    _avg?: marketAvgOrderByAggregateInput
    _max?: marketMaxOrderByAggregateInput
    _min?: marketMinOrderByAggregateInput
    _sum?: marketSumOrderByAggregateInput
  }

  export type marketScalarWhereWithAggregatesInput = {
    AND?: Enumerable<marketScalarWhereWithAggregatesInput>
    OR?: Enumerable<marketScalarWhereWithAggregatesInput>
    NOT?: Enumerable<marketScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    idol_id?: IntWithAggregatesFilter | number
    price?: IntWithAggregatesFilter | number
    owner_id?: IntWithAggregatesFilter | number
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    account_name?: StringFilter | string
    password?: StringFilter | string
    diamonds?: IntFilter | number
    peanuts?: IntFilter | number
    nickname?: StringNullableFilter | string | null
    idols?: IdolsListRelationFilter
    market?: MarketListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    account_name?: SortOrder
    password?: SortOrder
    diamonds?: SortOrder
    peanuts?: SortOrder
    nickname?: SortOrder
    idols?: idolsOrderByRelationAggregateInput
    market?: marketOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    account_name?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    account_name?: SortOrder
    password?: SortOrder
    diamonds?: SortOrder
    peanuts?: SortOrder
    nickname?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    account_name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    diamonds?: IntWithAggregatesFilter | number
    peanuts?: IntWithAggregatesFilter | number
    nickname?: StringNullableWithAggregatesFilter | string | null
  }

  export type idolsCreateInput = {
    name: string
    type: string
    image_url: string
    rarity?: number
    users: usersCreateNestedOneWithoutIdolsInput
    market?: marketCreateNestedOneWithoutIdolsInput
  }

  export type idolsUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    user_id: number
    image_url: string
    rarity?: number
    market?: marketUncheckedCreateNestedOneWithoutIdolsInput
  }

  export type idolsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutIdolsNestedInput
    market?: marketUpdateOneWithoutIdolsNestedInput
  }

  export type idolsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    market?: marketUncheckedUpdateOneWithoutIdolsNestedInput
  }

  export type idolsCreateManyInput = {
    id?: number
    name: string
    type: string
    user_id: number
    image_url: string
    rarity?: number
  }

  export type idolsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
  }

  export type idolsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
  }

  export type marketCreateInput = {
    price: number
    idols: idolsCreateNestedOneWithoutMarketInput
    users: usersCreateNestedOneWithoutMarketInput
  }

  export type marketUncheckedCreateInput = {
    id?: number
    idol_id: number
    price: number
    owner_id: number
  }

  export type marketUpdateInput = {
    price?: IntFieldUpdateOperationsInput | number
    idols?: idolsUpdateOneRequiredWithoutMarketNestedInput
    users?: usersUpdateOneRequiredWithoutMarketNestedInput
  }

  export type marketUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idol_id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    owner_id?: IntFieldUpdateOperationsInput | number
  }

  export type marketCreateManyInput = {
    id?: number
    idol_id: number
    price: number
    owner_id: number
  }

  export type marketUpdateManyMutationInput = {
    price?: IntFieldUpdateOperationsInput | number
  }

  export type marketUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idol_id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    owner_id?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    account_name: string
    password: string
    diamonds?: number
    peanuts?: number
    nickname?: string | null
    idols?: idolsCreateNestedManyWithoutUsersInput
    market?: marketCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    account_name: string
    password: string
    diamonds?: number
    peanuts?: number
    nickname?: string | null
    idols?: idolsUncheckedCreateNestedManyWithoutUsersInput
    market?: marketUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    idols?: idolsUpdateManyWithoutUsersNestedInput
    market?: marketUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    idols?: idolsUncheckedUpdateManyWithoutUsersNestedInput
    market?: marketUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    account_name: string
    password: string
    diamonds?: number
    peanuts?: number
    nickname?: string | null
  }

  export type usersUpdateManyMutationInput = {
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type MarketRelationFilter = {
    is?: marketWhereInput | null
    isNot?: marketWhereInput | null
  }

  export type idolsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    image_url?: SortOrder
    rarity?: SortOrder
  }

  export type idolsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    rarity?: SortOrder
  }

  export type idolsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    image_url?: SortOrder
    rarity?: SortOrder
  }

  export type idolsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    image_url?: SortOrder
    rarity?: SortOrder
  }

  export type idolsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    rarity?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IdolsRelationFilter = {
    is?: idolsWhereInput
    isNot?: idolsWhereInput
  }

  export type marketCountOrderByAggregateInput = {
    id?: SortOrder
    idol_id?: SortOrder
    price?: SortOrder
    owner_id?: SortOrder
  }

  export type marketAvgOrderByAggregateInput = {
    id?: SortOrder
    idol_id?: SortOrder
    price?: SortOrder
    owner_id?: SortOrder
  }

  export type marketMaxOrderByAggregateInput = {
    id?: SortOrder
    idol_id?: SortOrder
    price?: SortOrder
    owner_id?: SortOrder
  }

  export type marketMinOrderByAggregateInput = {
    id?: SortOrder
    idol_id?: SortOrder
    price?: SortOrder
    owner_id?: SortOrder
  }

  export type marketSumOrderByAggregateInput = {
    id?: SortOrder
    idol_id?: SortOrder
    price?: SortOrder
    owner_id?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IdolsListRelationFilter = {
    every?: idolsWhereInput
    some?: idolsWhereInput
    none?: idolsWhereInput
  }

  export type MarketListRelationFilter = {
    every?: marketWhereInput
    some?: marketWhereInput
    none?: marketWhereInput
  }

  export type idolsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type marketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    account_name?: SortOrder
    password?: SortOrder
    diamonds?: SortOrder
    peanuts?: SortOrder
    nickname?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    diamonds?: SortOrder
    peanuts?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    account_name?: SortOrder
    password?: SortOrder
    diamonds?: SortOrder
    peanuts?: SortOrder
    nickname?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    account_name?: SortOrder
    password?: SortOrder
    diamonds?: SortOrder
    peanuts?: SortOrder
    nickname?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    diamonds?: SortOrder
    peanuts?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type usersCreateNestedOneWithoutIdolsInput = {
    create?: XOR<usersCreateWithoutIdolsInput, usersUncheckedCreateWithoutIdolsInput>
    connectOrCreate?: usersCreateOrConnectWithoutIdolsInput
    connect?: usersWhereUniqueInput
  }

  export type marketCreateNestedOneWithoutIdolsInput = {
    create?: XOR<marketCreateWithoutIdolsInput, marketUncheckedCreateWithoutIdolsInput>
    connectOrCreate?: marketCreateOrConnectWithoutIdolsInput
    connect?: marketWhereUniqueInput
  }

  export type marketUncheckedCreateNestedOneWithoutIdolsInput = {
    create?: XOR<marketCreateWithoutIdolsInput, marketUncheckedCreateWithoutIdolsInput>
    connectOrCreate?: marketCreateOrConnectWithoutIdolsInput
    connect?: marketWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneRequiredWithoutIdolsNestedInput = {
    create?: XOR<usersCreateWithoutIdolsInput, usersUncheckedCreateWithoutIdolsInput>
    connectOrCreate?: usersCreateOrConnectWithoutIdolsInput
    upsert?: usersUpsertWithoutIdolsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutIdolsInput, usersUncheckedUpdateWithoutIdolsInput>
  }

  export type marketUpdateOneWithoutIdolsNestedInput = {
    create?: XOR<marketCreateWithoutIdolsInput, marketUncheckedCreateWithoutIdolsInput>
    connectOrCreate?: marketCreateOrConnectWithoutIdolsInput
    upsert?: marketUpsertWithoutIdolsInput
    disconnect?: boolean
    delete?: boolean
    connect?: marketWhereUniqueInput
    update?: XOR<marketUpdateWithoutIdolsInput, marketUncheckedUpdateWithoutIdolsInput>
  }

  export type marketUncheckedUpdateOneWithoutIdolsNestedInput = {
    create?: XOR<marketCreateWithoutIdolsInput, marketUncheckedCreateWithoutIdolsInput>
    connectOrCreate?: marketCreateOrConnectWithoutIdolsInput
    upsert?: marketUpsertWithoutIdolsInput
    disconnect?: boolean
    delete?: boolean
    connect?: marketWhereUniqueInput
    update?: XOR<marketUpdateWithoutIdolsInput, marketUncheckedUpdateWithoutIdolsInput>
  }

  export type idolsCreateNestedOneWithoutMarketInput = {
    create?: XOR<idolsCreateWithoutMarketInput, idolsUncheckedCreateWithoutMarketInput>
    connectOrCreate?: idolsCreateOrConnectWithoutMarketInput
    connect?: idolsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutMarketInput = {
    create?: XOR<usersCreateWithoutMarketInput, usersUncheckedCreateWithoutMarketInput>
    connectOrCreate?: usersCreateOrConnectWithoutMarketInput
    connect?: usersWhereUniqueInput
  }

  export type idolsUpdateOneRequiredWithoutMarketNestedInput = {
    create?: XOR<idolsCreateWithoutMarketInput, idolsUncheckedCreateWithoutMarketInput>
    connectOrCreate?: idolsCreateOrConnectWithoutMarketInput
    upsert?: idolsUpsertWithoutMarketInput
    connect?: idolsWhereUniqueInput
    update?: XOR<idolsUpdateWithoutMarketInput, idolsUncheckedUpdateWithoutMarketInput>
  }

  export type usersUpdateOneRequiredWithoutMarketNestedInput = {
    create?: XOR<usersCreateWithoutMarketInput, usersUncheckedCreateWithoutMarketInput>
    connectOrCreate?: usersCreateOrConnectWithoutMarketInput
    upsert?: usersUpsertWithoutMarketInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutMarketInput, usersUncheckedUpdateWithoutMarketInput>
  }

  export type idolsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<idolsCreateWithoutUsersInput>, Enumerable<idolsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<idolsCreateOrConnectWithoutUsersInput>
    createMany?: idolsCreateManyUsersInputEnvelope
    connect?: Enumerable<idolsWhereUniqueInput>
  }

  export type marketCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<marketCreateWithoutUsersInput>, Enumerable<marketUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<marketCreateOrConnectWithoutUsersInput>
    createMany?: marketCreateManyUsersInputEnvelope
    connect?: Enumerable<marketWhereUniqueInput>
  }

  export type idolsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<idolsCreateWithoutUsersInput>, Enumerable<idolsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<idolsCreateOrConnectWithoutUsersInput>
    createMany?: idolsCreateManyUsersInputEnvelope
    connect?: Enumerable<idolsWhereUniqueInput>
  }

  export type marketUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<marketCreateWithoutUsersInput>, Enumerable<marketUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<marketCreateOrConnectWithoutUsersInput>
    createMany?: marketCreateManyUsersInputEnvelope
    connect?: Enumerable<marketWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type idolsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<idolsCreateWithoutUsersInput>, Enumerable<idolsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<idolsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<idolsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: idolsCreateManyUsersInputEnvelope
    set?: Enumerable<idolsWhereUniqueInput>
    disconnect?: Enumerable<idolsWhereUniqueInput>
    delete?: Enumerable<idolsWhereUniqueInput>
    connect?: Enumerable<idolsWhereUniqueInput>
    update?: Enumerable<idolsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<idolsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<idolsScalarWhereInput>
  }

  export type marketUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<marketCreateWithoutUsersInput>, Enumerable<marketUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<marketCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<marketUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: marketCreateManyUsersInputEnvelope
    set?: Enumerable<marketWhereUniqueInput>
    disconnect?: Enumerable<marketWhereUniqueInput>
    delete?: Enumerable<marketWhereUniqueInput>
    connect?: Enumerable<marketWhereUniqueInput>
    update?: Enumerable<marketUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<marketUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<marketScalarWhereInput>
  }

  export type idolsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<idolsCreateWithoutUsersInput>, Enumerable<idolsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<idolsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<idolsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: idolsCreateManyUsersInputEnvelope
    set?: Enumerable<idolsWhereUniqueInput>
    disconnect?: Enumerable<idolsWhereUniqueInput>
    delete?: Enumerable<idolsWhereUniqueInput>
    connect?: Enumerable<idolsWhereUniqueInput>
    update?: Enumerable<idolsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<idolsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<idolsScalarWhereInput>
  }

  export type marketUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<marketCreateWithoutUsersInput>, Enumerable<marketUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<marketCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<marketUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: marketCreateManyUsersInputEnvelope
    set?: Enumerable<marketWhereUniqueInput>
    disconnect?: Enumerable<marketWhereUniqueInput>
    delete?: Enumerable<marketWhereUniqueInput>
    connect?: Enumerable<marketWhereUniqueInput>
    update?: Enumerable<marketUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<marketUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<marketScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type usersCreateWithoutIdolsInput = {
    account_name: string
    password: string
    diamonds?: number
    peanuts?: number
    nickname?: string | null
    market?: marketCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutIdolsInput = {
    id?: number
    account_name: string
    password: string
    diamonds?: number
    peanuts?: number
    nickname?: string | null
    market?: marketUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutIdolsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutIdolsInput, usersUncheckedCreateWithoutIdolsInput>
  }

  export type marketCreateWithoutIdolsInput = {
    price: number
    users: usersCreateNestedOneWithoutMarketInput
  }

  export type marketUncheckedCreateWithoutIdolsInput = {
    id?: number
    price: number
    owner_id: number
  }

  export type marketCreateOrConnectWithoutIdolsInput = {
    where: marketWhereUniqueInput
    create: XOR<marketCreateWithoutIdolsInput, marketUncheckedCreateWithoutIdolsInput>
  }

  export type usersUpsertWithoutIdolsInput = {
    update: XOR<usersUpdateWithoutIdolsInput, usersUncheckedUpdateWithoutIdolsInput>
    create: XOR<usersCreateWithoutIdolsInput, usersUncheckedCreateWithoutIdolsInput>
  }

  export type usersUpdateWithoutIdolsInput = {
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    market?: marketUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutIdolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    market?: marketUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type marketUpsertWithoutIdolsInput = {
    update: XOR<marketUpdateWithoutIdolsInput, marketUncheckedUpdateWithoutIdolsInput>
    create: XOR<marketCreateWithoutIdolsInput, marketUncheckedCreateWithoutIdolsInput>
  }

  export type marketUpdateWithoutIdolsInput = {
    price?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutMarketNestedInput
  }

  export type marketUncheckedUpdateWithoutIdolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    owner_id?: IntFieldUpdateOperationsInput | number
  }

  export type idolsCreateWithoutMarketInput = {
    name: string
    type: string
    image_url: string
    rarity?: number
    users: usersCreateNestedOneWithoutIdolsInput
  }

  export type idolsUncheckedCreateWithoutMarketInput = {
    id?: number
    name: string
    type: string
    user_id: number
    image_url: string
    rarity?: number
  }

  export type idolsCreateOrConnectWithoutMarketInput = {
    where: idolsWhereUniqueInput
    create: XOR<idolsCreateWithoutMarketInput, idolsUncheckedCreateWithoutMarketInput>
  }

  export type usersCreateWithoutMarketInput = {
    account_name: string
    password: string
    diamonds?: number
    peanuts?: number
    nickname?: string | null
    idols?: idolsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutMarketInput = {
    id?: number
    account_name: string
    password: string
    diamonds?: number
    peanuts?: number
    nickname?: string | null
    idols?: idolsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutMarketInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutMarketInput, usersUncheckedCreateWithoutMarketInput>
  }

  export type idolsUpsertWithoutMarketInput = {
    update: XOR<idolsUpdateWithoutMarketInput, idolsUncheckedUpdateWithoutMarketInput>
    create: XOR<idolsCreateWithoutMarketInput, idolsUncheckedCreateWithoutMarketInput>
  }

  export type idolsUpdateWithoutMarketInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutIdolsNestedInput
  }

  export type idolsUncheckedUpdateWithoutMarketInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
  }

  export type usersUpsertWithoutMarketInput = {
    update: XOR<usersUpdateWithoutMarketInput, usersUncheckedUpdateWithoutMarketInput>
    create: XOR<usersCreateWithoutMarketInput, usersUncheckedCreateWithoutMarketInput>
  }

  export type usersUpdateWithoutMarketInput = {
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    idols?: idolsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutMarketInput = {
    id?: IntFieldUpdateOperationsInput | number
    account_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    diamonds?: IntFieldUpdateOperationsInput | number
    peanuts?: IntFieldUpdateOperationsInput | number
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    idols?: idolsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type idolsCreateWithoutUsersInput = {
    name: string
    type: string
    image_url: string
    rarity?: number
    market?: marketCreateNestedOneWithoutIdolsInput
  }

  export type idolsUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    type: string
    image_url: string
    rarity?: number
    market?: marketUncheckedCreateNestedOneWithoutIdolsInput
  }

  export type idolsCreateOrConnectWithoutUsersInput = {
    where: idolsWhereUniqueInput
    create: XOR<idolsCreateWithoutUsersInput, idolsUncheckedCreateWithoutUsersInput>
  }

  export type idolsCreateManyUsersInputEnvelope = {
    data: Enumerable<idolsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type marketCreateWithoutUsersInput = {
    price: number
    idols: idolsCreateNestedOneWithoutMarketInput
  }

  export type marketUncheckedCreateWithoutUsersInput = {
    id?: number
    idol_id: number
    price: number
  }

  export type marketCreateOrConnectWithoutUsersInput = {
    where: marketWhereUniqueInput
    create: XOR<marketCreateWithoutUsersInput, marketUncheckedCreateWithoutUsersInput>
  }

  export type marketCreateManyUsersInputEnvelope = {
    data: Enumerable<marketCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type idolsUpsertWithWhereUniqueWithoutUsersInput = {
    where: idolsWhereUniqueInput
    update: XOR<idolsUpdateWithoutUsersInput, idolsUncheckedUpdateWithoutUsersInput>
    create: XOR<idolsCreateWithoutUsersInput, idolsUncheckedCreateWithoutUsersInput>
  }

  export type idolsUpdateWithWhereUniqueWithoutUsersInput = {
    where: idolsWhereUniqueInput
    data: XOR<idolsUpdateWithoutUsersInput, idolsUncheckedUpdateWithoutUsersInput>
  }

  export type idolsUpdateManyWithWhereWithoutUsersInput = {
    where: idolsScalarWhereInput
    data: XOR<idolsUpdateManyMutationInput, idolsUncheckedUpdateManyWithoutIdolsInput>
  }

  export type idolsScalarWhereInput = {
    AND?: Enumerable<idolsScalarWhereInput>
    OR?: Enumerable<idolsScalarWhereInput>
    NOT?: Enumerable<idolsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    user_id?: IntFilter | number
    image_url?: StringFilter | string
    rarity?: IntFilter | number
  }

  export type marketUpsertWithWhereUniqueWithoutUsersInput = {
    where: marketWhereUniqueInput
    update: XOR<marketUpdateWithoutUsersInput, marketUncheckedUpdateWithoutUsersInput>
    create: XOR<marketCreateWithoutUsersInput, marketUncheckedCreateWithoutUsersInput>
  }

  export type marketUpdateWithWhereUniqueWithoutUsersInput = {
    where: marketWhereUniqueInput
    data: XOR<marketUpdateWithoutUsersInput, marketUncheckedUpdateWithoutUsersInput>
  }

  export type marketUpdateManyWithWhereWithoutUsersInput = {
    where: marketScalarWhereInput
    data: XOR<marketUpdateManyMutationInput, marketUncheckedUpdateManyWithoutMarketInput>
  }

  export type marketScalarWhereInput = {
    AND?: Enumerable<marketScalarWhereInput>
    OR?: Enumerable<marketScalarWhereInput>
    NOT?: Enumerable<marketScalarWhereInput>
    id?: IntFilter | number
    idol_id?: IntFilter | number
    price?: IntFilter | number
    owner_id?: IntFilter | number
  }

  export type idolsCreateManyUsersInput = {
    id?: number
    name: string
    type: string
    image_url: string
    rarity?: number
  }

  export type marketCreateManyUsersInput = {
    id?: number
    idol_id: number
    price: number
  }

  export type idolsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    market?: marketUpdateOneWithoutIdolsNestedInput
  }

  export type idolsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
    market?: marketUncheckedUpdateOneWithoutIdolsNestedInput
  }

  export type idolsUncheckedUpdateManyWithoutIdolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    rarity?: IntFieldUpdateOperationsInput | number
  }

  export type marketUpdateWithoutUsersInput = {
    price?: IntFieldUpdateOperationsInput | number
    idols?: idolsUpdateOneRequiredWithoutMarketNestedInput
  }

  export type marketUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    idol_id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type marketUncheckedUpdateManyWithoutMarketInput = {
    id?: IntFieldUpdateOperationsInput | number
    idol_id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}